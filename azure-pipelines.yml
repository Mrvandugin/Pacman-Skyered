# Name der Pipeline
name: pacman-app-pipeline

# Definition der Trigger
trigger:
  - main

# Definition der Stages
stages:
  # Build-Stage
  - stage: Build
    # Jobs in der Build-Stage
    jobs:
      # Build-Job
      - job: BuildDockerfile
        # Schritte im Build-Job
        steps:
          # Checkout-Code-Schritt
          - checkout: self
          # Docker-Build-Schritt
          - task: Docker@2
            displayName: Build Dockerfile
            inputs:
              containerRegistry: $(dockerRegistry)
              repository: $(imageName)
              command: build
              Dockerfile: $(dockerfilePath)
              tags: |
                $(imageName):$(Build.BuildId)

  # Test-Stage
  - stage: Test
    # Jobs in der Test-Stage
    jobs:
      # Test-Job
      - job: TestApplication
        # Schritte im Test-Job
        steps:
          # Checkout-Code-Schritt
          - checkout: self
          # Docker-Run-Schritt
          - task: Docker@2
            displayName: Run Docker Container
            inputs:
              containerRegistry: $(dockerRegistry)
              repository: $(imageName)
              command: run
              arguments: |
                -d
                --name pacman-app
                $(imageName):$(Build.BuildId)
              ports: |
                80:80
              envVars: |
                ENVIRONMENT=staging
          # Test-Schritt
          - script: npm run test

  # Tag-Stage
  - stage: Tag
    # Jobs in der Tag-Stage
    jobs:
      # Tag-Job
      - job: TagImage
        # Schritte im Tag-Job
        steps:
          # Docker-Tag-Schritt
          - task: Docker@2
            displayName: Tag Docker Image
            inputs:
              containerRegistry: $(dockerRegistry)
              repository: $(imageName)
              command: tag
              arguments: |
                $(imageName):$(Build.BuildId)
                $(imageName):latest
